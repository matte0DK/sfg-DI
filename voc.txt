THE IoC CONTAINER
-----------------
Responsible to instantiate, configure and assemble the objects.
The IoC container gets information from the XML file and works accordingly.
The main tasks performed by IoC container are:

- to instantiate the application class
- to configure the object
- to assemble the dependencies between the objects

There are two types of IoC containers:

- BeanFactory
- ApplicationContext

! The ApplicationContext interface is built on top of the BeanFactory interface.
It adds some extra functionality than BeanFactory such as simple integration with Spring's AOP, message resource handling (for I18N),
event propagation, application layer specific context (e.g. WebApplicationContext) for web application.
So it is better to use ApplicationContext than BeanFactory !


WHAT IS A SPRING BEAN?
----------------------
1. Spring Bean
In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans.
A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container.

2. Inversion of Control
Simply put, Inversion of Control, or IoC for short, is a process in which an object defines its dependencies without creating them.
This object delegates the job of constructing such dependencies to an IoC container.

3. Dependency injection
In software engineering, dependency injection is a technique in which an object receives other objects that it depends on.
These other objects are called dependencies. In the typical "using" relationship the receiving object is called a client and the passed
(that is, "injected") object is called a service. The code that passes the service to the client can be many kinds of things and is called the injector.
Instead of the client specifying which service it will use, the injector tells the client what service to use.
The "injection" refers to the passing of a dependency (a service) into the object (a client) that would use it.

The service is made part of the client's state. Passing the service to the client,
rather than allowing a client to build or find the service, is the fundamental requirement of the pattern.

The intent behind dependency injection is to achieve separation of concerns of construction and use of objects.
This can increase readability and code reuse.

Dependency injection is one form of the broader technique of inversion of control.
A client who wants to call some services should not have to know how to construct those services.
Instead, the client delegates the responsibility of providing its services to external code (the injector).



